const study = () => {
    // 匹配5-12位数字，\d匹配数字，重复5-12次
    const regex = /^\d{5,12}$/;
    const str = '123451234512345'


    console.log(regex.test(str));
}
study()
/**  下面做这些都叫元字符，大写就变成反义？？？？
 * . 匹配除换行符以外的任意字符
 * \w 匹配字母或数字或下划线或汉字  \W匹配任意不是字母，数字，下划线，汉字的字符
 * \s 匹配任意的空白字符  \S匹配任意不是空白符的字符
 * \b 匹配单词的开始或结束  \D匹配任意非数字的字符
 * \d 匹配数字
 * ^和$匹配一个位置，和\b有点像
 * [^x]  匹配除了x以外的任意字符
 * [^aeiou]  匹配除了aeiou这几个字母以外的任意字符
 *  */

// TODO  // chenJi 2021/03/29

/** 字符转义，使用\对一些特殊符号进行转义
 * \*重复零次或者多次
 * \+重复一次或者更多次
 * \？重复零次或者一次
 * {n}  重复n次
 * {n,} 重复n次或更多次
 * {n,m}重复n-m次
*/

// TODO  // chenJi 2021/03/30
/** 贪婪与懒惰
 *  贪婪意味着正则表达式匹配前提下匹配尽可能多的字符
 * a.*b 它将会匹配最长的以a开始，以b结束的字符串
 *
 *  懒惰意味着匹配前提下尽可能短的字符
 * a.?b  它将匹配以a开始，以b结尾最短的字符串
 */

const a = '阿西吧1'
const b = '阿西吧2'
const c = '阿西吧3'

const d = '阿西吧4'

// TODO  // chenJi 2021/03/30
/**文件夹搜索
 *  模糊搜索 \.\/src/\**\/\*\.html
 */